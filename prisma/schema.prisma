// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// Note: Removed zod-prisma generator due to compatibility issues with Prisma v6
// Consider using alternatives like prisma-zod-generator or manual Zod schema creation

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  products      Product[]
  
  // Chat relationships
  buyerConversations  Conversation[] @relation("BuyerConversations")
  sellerConversations Conversation[] @relation("SellerConversations")
  messages            Message[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum ProductStatus {
  ACTIVE
  SOLD
  INACTIVE
}

model Product {
  id          String        @id @default(uuid())
  name        String
  description String?
  price       Float?
  status      ProductStatus @default(ACTIVE)
  sellerId    String
  s3UrlImage  String?
  seller      User          @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Chat relationships
  conversations Conversation[]

  @@map("product")
}

model Conversation {
  id        String   @id @default(uuid())
  productId String
  buyerId   String
  sellerId  String
  
  // Relations
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  buyer     User     @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Cascade)
  seller    User     @relation("SellerConversations", fields: [sellerId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Ensure one conversation per buyer-seller-product combination
  @@unique([productId, buyerId, sellerId])
  @@map("conversation")
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
}

model Message {
  id             String        @id @default(uuid())
  conversationId String
  senderId       String
  content        String
  status         MessageStatus @default(SENT)
  
  // Relations
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation(fields: [senderId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  @@map("message")
}
